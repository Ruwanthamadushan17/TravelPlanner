// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TravelPlanner.Infrastructure;

#nullable disable

namespace TravelPlanner.Infrastructure.Migrations
{
    [DbContext(typeof(TravelPlannerDb))]
    [Migration("20251012172340_Init_Sql")]
    partial class Init_Sql
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TravelPlanner.Domain.Entities.DaySuggestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DayStepId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("DayStepId");

                    b.ToTable("DaySuggestions");
                });

            modelBuilder.Entity("TravelPlanner.Domain.Entities.Destination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TripId");

                    b.ToTable("Destinations");
                });

            modelBuilder.Entity("TravelPlanner.Domain.Entities.Itinerary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TotalTravelMinutes")
                        .HasColumnType("int");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TripId");

                    b.ToTable("Itineraries", t =>
                        {
                            t.HasCheckConstraint("CK_Itinerary_TotalCost", "[TotalCost] >= 0");
                        });
                });

            modelBuilder.Entity("TravelPlanner.Domain.Entities.ItineraryStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<int>("ItineraryId")
                        .HasColumnType("int");

                    b.Property<int>("OrderWithInPlan")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItineraryId", "OrderWithInPlan")
                        .IsUnique();

                    b.ToTable("ItinerarySteps", t =>
                        {
                            t.HasCheckConstraint("CK_ItineraryStep_Order", "[OrderWithInPlan] >= 0");
                        });

                    b.HasDiscriminator().HasValue("ItineraryStep");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("TravelPlanner.Domain.Entities.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Budget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("OwnerEmail")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("Trips", t =>
                        {
                            t.HasCheckConstraint("CK_Trip_Dates", "[EndDate] > [StartDate]");
                        });
                });

            modelBuilder.Entity("TravelPlanner.Domain.Entities.ArrivalStep", b =>
                {
                    b.HasBaseType("TravelPlanner.Domain.Entities.ItineraryStep");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_ItineraryStep_Order", "[OrderWithInPlan] >= 0");
                        });

                    b.HasDiscriminator().HasValue("ArrivalStep");
                });

            modelBuilder.Entity("TravelPlanner.Domain.Entities.DayStep", b =>
                {
                    b.HasBaseType("TravelPlanner.Domain.Entities.ItineraryStep");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_ItineraryStep_Order", "[OrderWithInPlan] >= 0");

                            t.HasCheckConstraint("CK_DayStep_Day", "[Day] >= 1");
                        });

                    b.HasDiscriminator().HasValue("DayStep");
                });

            modelBuilder.Entity("TravelPlanner.Domain.Entities.DaySuggestion", b =>
                {
                    b.HasOne("TravelPlanner.Domain.Entities.DayStep", "DayStep")
                        .WithMany("Suggestions")
                        .HasForeignKey("DayStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DayStep");
                });

            modelBuilder.Entity("TravelPlanner.Domain.Entities.Destination", b =>
                {
                    b.HasOne("TravelPlanner.Domain.Entities.Trip", "Trip")
                        .WithMany("Destinations")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("TravelPlanner.Domain.Entities.Itinerary", b =>
                {
                    b.HasOne("TravelPlanner.Domain.Entities.Trip", "Trip")
                        .WithMany()
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("TravelPlanner.Domain.Entities.ItineraryStep", b =>
                {
                    b.HasOne("TravelPlanner.Domain.Entities.Itinerary", "Itinerary")
                        .WithMany("Steps")
                        .HasForeignKey("ItineraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Itinerary");
                });

            modelBuilder.Entity("TravelPlanner.Domain.Entities.Itinerary", b =>
                {
                    b.Navigation("Steps");
                });

            modelBuilder.Entity("TravelPlanner.Domain.Entities.Trip", b =>
                {
                    b.Navigation("Destinations");
                });

            modelBuilder.Entity("TravelPlanner.Domain.Entities.DayStep", b =>
                {
                    b.Navigation("Suggestions");
                });
#pragma warning restore 612, 618
        }
    }
}
